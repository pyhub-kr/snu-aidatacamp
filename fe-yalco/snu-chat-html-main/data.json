[
  {
    "id": "js",
    "name": "JavaScript",
    "definition": "JavaScript는 웹 개발을 위한 범용 스크립트 언어로, 클라이언트와 서버 모두에서 활용될 수 있는 유연한 언어입니다.",
    "tags": [
      "동적언어",
      "이벤트기반",
      "비동기",
      "객체지향",
      "함수형"
    ],
    "keyCharacteristics": [
      {
        "subtitle": "동적 형식 언어",
        "description": "JavaScript는 변수 선언 시 데이터 타입을 미리 지정하지 않아도 되는 동적 형식 언어입니다. 변수의 타입은 실행 시점에 결정되며, 유연한 코딩이 가능하지만 타입 불일치로 인한 오류 발생 가능성도 있으니 주의가 필요합니다."
      },
      {
        "subtitle": "이벤트 기반 프로그래밍",
        "description": "JavaScript는 이벤트 리스너를 통해 사용자와의 상호작용을 처리합니다. 사용자가 버튼을 클릭하거나 입력 필드에 값을 입력하는 등의 행동에 반응하여 코드를 실행할 수 있습니다. 이 방식은 웹 애플리케이션의 동적인 동작을 구현하는 데 매우 유용합니다."
      },
      {
        "subtitle": "비동기 처리",
        "description": "JavaScript는 비동기 작업을 지원하여 대규모 애플리케이션에서도 성능 저하 없이 작업을 처리할 수 있습니다. 이를 위해 콜백 함수, Promise, 그리고 async/await 구문을 제공합니다. 특히, async/await는 비동기 코드의 가독성을 크게 향상시킵니다."
      },
      {
        "subtitle": "다중 패러다임 지원",
        "description": "JavaScript는 객체 지향, 함수형, 그리고 절차적 프로그래밍 스타일을 모두 지원합니다. 이를 통해 다양한 프로그래밍 패러다임에 맞는 코드를 작성할 수 있으며, 개발자의 선호도에 따라 유연하게 코딩 방식을 선택할 수 있습니다."
      }
    ]
  },
  {
    "id": "react",
    "name": "React",
    "definition": "React는 Facebook에서 개발한 사용자 인터페이스 구축을 위한 JavaScript 라이브러리로, 효율적이고 재사용 가능한 UI 개발을 지원합니다.",
    "tags": [
      "컴포넌트기반",
      "가상DOM",
      "상태관리",
      "ReactHooks"
    ],
    "keyCharacteristics": [
      {
        "subtitle": "컴포넌트 기반 구조",
        "description": "React는 UI를 작은 단위의 컴포넌트로 나누어 개발할 수 있도록 설계되었습니다. 각 컴포넌트는 독립적으로 동작하며, 재사용이 가능하여 유지보수가 용이합니다. 이를 통해 복잡한 사용자 인터페이스를 효과적으로 구성할 수 있습니다."
      },
      {
        "subtitle": "가상 DOM",
        "description": "React는 실제 DOM 대신 가상 DOM을 사용하여 변경 사항을 효율적으로 관리합니다. 가상 DOM은 변경 내용을 메모리에 저장한 후, 실제 DOM에 필요한 최소한의 변경만 적용합니다. 이로 인해 성능이 크게 향상되며, 특히 동적인 데이터가 많은 애플리케이션에서 효과적입니다."
      },
      {
        "subtitle": "상태 관리",
        "description": "React는 컴포넌트 상태를 관리하여 데이터와 UI 간의 일관성을 유지합니다. 상태는 컴포넌트의 동작과 렌더링을 제어하며, 이를 통해 사용자의 상호작용이나 데이터 변경에 따라 UI가 동적으로 업데이트됩니다."
      },
      {
        "subtitle": "React Hooks",
        "description": "React Hooks는 함수형 컴포넌트에서도 상태와 라이프사이클 메서드를 활용할 수 있도록 해줍니다. useState와 useEffect 같은 Hook은 상태 관리와 비동기 작업 처리를 단순화시켜, 클래스 컴포넌트보다 간결하고 이해하기 쉬운 코드를 작성할 수 있도록 도와줍니다."
      }
    ]
  }
]
